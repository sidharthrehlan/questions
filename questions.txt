Basic JS programmming
    Scope of variable
    What is Associative Array? How do we use it?

OOPS JS

    Difference between Classic Inheritance and Prototypical Inheritance
    What is difference between private variable, public variable and static variable? How we achieve this in JS?
    How to add/remove properties to object in run time?
    How to achieve inheritance ?
    How to extend built-in objects?
    Why extending array is bad idea?

DOM and JS

    Difference between browser detection and feature detection
    DOM Event Propagation
    Event Delegation
    Event bubbling V/s Event Capturing

Misc

    Graceful Degradation V/s Progressive Enhancement

	
	
Question : Ask him why, despite his infinite knowledge of JavaScript, it is still a good idea to use existing frameworks such as jQuery, Mootools, Prototype, etc.

Answer: Good coders code, great coders reuse. Thousands of man hours have been poured into these libraries to abstract DOM capabilities away from browser specific implementations. There's no reason to go through all of the different browser DOM headaches yourself just to reinvent the fixes.


accidental closures

Question : In JavaScript, what is the difference between var x = 1 and x = 1? Answer in as much or as little detail as you feel comfortable.
Answer : 
Novice JS programmers might have a basic answer about locals vs globals. Intermediate JS guys should definitely have that answer, and should probably mention function-level scope. Anyone calling themselves an "advanced" JS programmer should be prepared to talk about locals, implied globals, the window object, function-scope, declaration hoisting, and scope chains. Furthermore, I'd love to hear about [[DontDelete]], hoisting precedence (parameters vs var vs function), and undefined.

Question : 
Another good question is to ask them to write a sum() function that accepts any number of arguments, and returns their sum. Then, ask them to use that function (without modification) to sum all the values in an array. They should write a function that looks like this:

function sum() {
  var i, l, result = 0;
  for (i = 0, l = arguments.length; i < l; i++) {
    result += arguments[i];
  }
  return result;
}
sum(1,2,3); // 6

And they should invoke it on your array like this (context for apply can be whatever, I usually use null in that case):

var data = [1,2,3];
sum.apply(null, data); // 6



