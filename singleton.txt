/*
Singleton Pattern
The Singleton pattern is thus known because it restricts instantiation of a class to a single object.

Object creation 
There are 3 methods to create object.

*/
1)	var obj = {}
2)	
var Person = function (){

}


var man = new Person();



/*
Assigning properies to object.
There are 5 methods to assign properties to object
*/

1) 
var man = {
	noOfHands : 2
};

2) man.noOfLegs = 2;

3) man['noOfHeads'] = 1;

/*
	Object.defineProperty(obj, prop, descriptor)
*/

4) Object.defineProperty(man,'noOfNose',{
	value : 2
});

URL : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.

Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.

Both data and accessor descriptors are objects. They share the following optional keys:





5) /*
	Object.defineProperties(obj, prop, descriptor)
*/

Arguments :
fucntion arguments :
1)  arguments are not required as in traditional programming
2) arguments are untype
3) unspecific arguments are undefined.
4) arguments are available through arguments object
it is array like but not really an array.

As it is not an array, sorting or filtering functions does not apply on arguments

jeremy mcpeak

/*ECMA Script 5 

History of javascript 
*/

Javascript was developed by Brendan Eich of Netscape under name Mocha later LiveScript and finally named Javascript.

Microsoft develop Jscript and delivered JScript to Ecma internation for standardization and work on spedification ECMA-262.

EcmaScript is the name of scripting language standardized in ECMA-262. 

5 Editions of ECMA Script published.

ECMA script 4 of ECMA-262 is also called with codename EcmaScript Harmony 


Mozilla Firefox has Gecko layout Engine and implement ECMA-262 5  and upcoming features of 6

Google Chrome, the V8 engine

Internet Explorer, the Trident layout engine


Object Creation
================
var johnDoe = {
	firstName : 'John',
	lastName : 'Doe',
	sayName : function(){
			return 'my name is'+this.firstName+' '+this.lastName;
	}
}

var janeDoe = Object.create(johnDoe,{
	firstName : {value:'Jane'},
	greet :
	{
		value : function(person){
			return 'Hello, '+person.firstName;
		}
	}
});

var jimSmith = Object.create(janeDoe,{
	firstName : {value:'Jim'},
	lastName : {value:'Smith'}
});



Question : Difference between __proto__ and prototype

Answer : __proto__ is parent of object.

like var foo = {};

foo.__proto__ is Object
And in last example jimSmith.__proto__ is janeDoe

Note : We do not change properties of __proto__


ii) prototype is property of function.
We can add new properties to function through prototype. example 
var Foo = function(){
	this.firstname = 'sidharth';
}

var foo = new Foo();
foo.prototype.lastname = 'rehlan'; //new property is added to variable through prototype.

we can access lastname and firstname as foo.fistname and foo.lastName. But we can't access firstname as  foo.prototype.first because firstname is not prototype of lastname.

in javascript inheritance __proto__ is a secret link between child and parent object.
Note : we should not use __proto__ because it is not portable. *** __proto__ is papa ***




 

